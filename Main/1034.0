/* Event test TEST, Clicked/selected */
procedure expose FieldName. Definition. Order. Magic. window SubRoutineHistory

/* copy aout the first 10 records of the input file. */

SubRoutineHistory = 'DBASWrite' SubRoutineHistory


dbfin = VpGetItemValue(window,'INPUT')
dbfout = VpGetItemValue(window,'OUTPUT')

CALL VpItem window,'MESSAGE','FORECOLOR','RED'
CALL VpSetItemValue window,'MESSAGE','Writing database file.'

drop TrueLength.

/* Create the output database file.  */
DBFout.fieldcount = strip(Order.0)
do i = 1 to Order.0
   Order.i     = strip(Order.i)
   FieldName.i = translate(strip(FieldName.i))
   v           = FieldName.i
   if left(v,1)='_' then do
      /* REXXBASE can not properly handle field names starting with '_'.     */
      /* Therefore we record the need for a patch here and do the patch      */
      /* after writing the data.                                             */
      TrueLength.i       = length(v)
      v = strip(v,'L','_')
      end
   parse var Definition.i FieldType FieldLength
   FieldType   = left(strip(FieldType),1)
   FieldLength = strip(FieldLength)

   DBFout.fieldname.i = v
   DBFout.v.type      = FieldType
   DBFout.v.length    = FieldLength
   end i

rc=DBASStructureCheck()
if rc \=1 then do 
   txt1='The database can not be made this way.'
   parse var rc . txt2
   response=VpMessageBox(window,txt1,txt2)
   parse var SubRoutineHistory . SubRoutineHistory
   return 0
   end

rc=rexxbase_createdbf('DBFout') 
if rc\='' then do
   txt = 'Attempting to create .dbf file: 'rc
   rc=DBASRexxBaseError(txt)
   parse var SubRoutineHistory . SubRoutineHistory
   return 0
   end


/* Read the input database structure. */
rc1 = rexxbase_opendbf("dbfin")
if rc1\='' then do
   txt = 'Attempting to open .dbf file: 'rc1
   rc2=DBASRexxBaseError(txt)
   parse var SubRoutineHistory . SubRoutineHistory
   return 0
   end
do j = 1 to dbfin.fieldcount
   FieldNameIn.j = translate(dbfin.FieldName.j)
   w          = translate(dbfin.fieldname.j)
   typeIn.j   = dbfin.w.type  
   lengthIn.j = dbfin.w.length
   
   DefinitionIn.j=right(typeIn.j,8) right(lengthIn.j,8)
   OrderIn.j     =right(j,4)
   end j

FieldNameIn.0  = dbfin.fieldcount
DefinitionIn.0 = dbfin.fieldcount
OrderIn.0      = dbfin.fieldcount


/* Write the output records.  */
do RecordN = 1 to 10 /* dbfin.recordcount */
   rc=rexxbase_ReadDBF("dbfin")
   stuff =''
   /* Read the input record. */
   do j = 1 to FieldNameIn.0
      vIn = FieldNameIn.j
      ValueIn.j   = dbfin.vIn
      end j


   /* Based on the new order information write a new record out. */
   do h = 1 to Order.0
      FieldNameOut = DBFout.fieldname.h
      index        = Order.h
      DBFout.FieldNameOut = ValueIn.Index
      end h

   rc1=rexxbase_writedbf('dbfout')
   if rc1\='' then do
      txt= 'Attempting to write .dbf file: 'rc1
      rc2=DBASRexxBaseError(txt)
      parse var SubRoutineHistory . SubRoutineHistory
      return 0
      end

   CALL VpSetItemValue window,'MESSAGE',right(RecordN,6)'/'left(dbfin.recordcount,6)
   end RecordN

rc=rexxbase_closedbf("dbfin")
rc=rexxbase_closedbf('dbfout') 

/* Now patch the names if necessary. */
do i = 1 to Order.0
   if datatype(TrueLength.i,'W') then do
      /* Patch the name. */
      rc=stream(dbfout,'c','open')
      WritePosition=stream(dbfout,'c','seek = 'i*32 + 1 )
      v = right(DBFout.fieldname.i,TrueLength.i,'_')
      rc=charout(dbfout,v)
      rc=stream(dbfout,'c','close')
      end
   end i

CALL VpSetItemValue window,'MESSAGE',''
parse var SubRoutineHistory . SubRoutineHistory
return 1

